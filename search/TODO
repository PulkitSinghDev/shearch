3500 lines
280 stagedirs
38 plays
max about 130,000 items
total about 12,000,000 characters

for each speech
  get speaker name
  get lists

{
  "location": "Ant.5:01",
  "speaker": "DERCETAS",
  "content": "I am call'd Dercetas;\nMark Antony I served, who best was worthy\nBest to be served: whilst he stood up and spoke,\nHe was my master; and I wore my life\nTo spend upon his haters. If thou please\nTo take me to thee, as I was to him\nI'll be to Caesar; if thou pleasest not,\nI yield thee up my life."
}

Search:

  for each document matching query
    display text with term highlighted
    display shorthand for match location (as per Arden editions)

Click on result:

  get l
  display play
  var scene = scene represented by l
  var line = first line that matches t
  scrollIntoView() line, with t highlighted




  function contains(selector, text) {
    var elements = document.querySelectorAll(selector);
    return [].filter.call(elements, function(element){
      return RegExp(text).test(element.textContent);
    });
  }
  Ten use it with like so:

  contains('p', 'world'); // find "p" that contain "world"
  contains('p', /^world/); // find "p" that start with "world"
  contains('p', /world$/i); // find "p" that end with "world", case-insensitive




<h1>The Tragedy of Antony and Cleopatra</h1>
<h2>Act I</h2>
<h3>Scene 1</h3>


Search content:
• Play
• Act number
• Persona
• Scene description
• Stage direction
• Speaker
• Line

Search options:
• Play
• Act number
• Scene number
• Speaker



Autofill
• Play
• Act number (given play)
• Scene number (given play and act)
• Speaker (given play — maybe)
• Previous queries


Convert XML to JSON

Convert XML into HTML
• CSS based on Arden edition

for each play
for each act
for each scene
for each speech
for each line or stagedir
add id


{
  speaker: "PHILO"
  lines: ["Nay, but this ...", ...]
}




Ideas

  Click/tap on word: search

